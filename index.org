* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: GraphQL with Phoenix and Absinthe
#+SUBTITLE: What, Why, Absinthe and Phoenix
#+COMPANY: For Elixir Developers Mexico
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/graphql-logo.png
#+ICON: images/graphql-logo.png
#+HASHTAG: #ElixirLang #ElixirMX #ElixirWithLove

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil
#+LANGUAGE: es
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="theme/css/custom.css" />

* Me
- Egresado de Codeable. 
  - Bootcamp intensivo de 6 meses para aprender Ruby y JavaScript.
- Software Engineer en Able.
- 5 años de experiencia con Elixir
  - Side-Projects y trabajos freelancer.
- Entusiasta sobre Elixir.

* Qué es GraphQL?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Qué no es GraphQL?
No tiene que ver con:
- Grafos
- Base de datos
- ORM / Ecto

* Qué es GraphQL?
Query Language for API's

Main Objective:
- *Dar poder a los clientes* en la Información que requiere.

* Comó funciona?
#+BEGIN_CENTER
#+ATTR_HTML: :height 300px
[[file:images/client-server.png]]
#+END_CENTER


* Por qué usar GraphQL?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
Estoy como con REST. Por qué salir de mi zona de confort? 

* Beneficios
- Declarativo
- Compositional
- Discoverable
 
* Declarativo y Compositional
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/busqueda.png]]
#+END_CENTER

* Declarativo y Compositional
REST Approach
- GET =/countries=
- GET =/types=
- GET =/seniority=

* Declarativo y Compositional
GraphQL Approach (multiple resources in one request)
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/multiple_in_one.png]]
#+END_CENTER

* Declarativo y Compositional
Tambien para relaciones entre datos
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/jobs_current_recruiter.png]]
#+END_CENTER

* Discoverable
*Schema*
- Tipado Fuerte
- Self-documented
- Documentation as code

* Cuando no usar GraphQL?
- Simple API es suficiente.

* Conceptos
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Schema
- Define los datos que los clientes pueden *pedir*
- Define los datos que los clientes pueden *modificar*
- Define los datos que los clientes pueden *ser notiticados*

* Schema
#+BEGIN_CENTER
#+ATTR_HTML: :height 375px
[[file:images/schema.png]]
#+END_CENTER

* Query, Mutation, Subscription
*Query*
- Pedir Información.
*Mutation*
- Modificar Información.
*Subscription*
- Subscribirse a cambios.

* Query, Mutation, Subscription
Cada uno de estos =fields= contiene la *especificación de los documentos* que el cliente puede usar.
#+BEGIN_CENTER
#+ATTR_HTML: :height 300px
[[file:images/sign_in_field.png]]
#+END_CENTER

* Partes de un Field
- Operación: =:sign_in=
- Tipado de valor devuelto: =:session=
- Argumentos: =:email= y =:password= (incluye informacion de su tipado y otros parametros)
- Resolver: =&Resolvers.Accounts.sign_in/3=

* Tipado
- Scalar
  - Absinthe Custom Types
- Enum
- Non-null
- Lists
- Object Types

* Scalar types
- ID
- Int
- Float
- String
- Boolean
- <your type here>

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:1]
Nota[fn:2]
#+END_QUOTE

* Absinthe Custom Types
- datetime (UTC)
- naive_datetime
- date
- time
- decimal

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:3]
#+END_QUOTE

* Enum
Es un tipo de escalar que restringe los datos a una serie de *allowed values*.
#+BEGIN_CENTER
#+ATTR_HTML: :height 325px
[[file:images/enum.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:4]
#+END_QUOTE

* List y Non-null
- *Non-null*: Modificador para impedir valores *null* a un *type* existente.
- *List*: Modificador para habilitar array de un mismo *type*

#+BEGIN_QUOTE
Nota[fn:5]
#+END_QUOTE

* List y Non-null
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/list_null.png]]
#+END_CENTER

* Object Types
=Type= para datos estructurados

* Object Types
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/job.png]]
#+END_CENTER

* Resolver
Funcion encargada de hacer el nexo entre GraphQL y la logica de negocios (Contexto)
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/sign_in_resolver.png]]
#+END_CENTER

* Absinthe y Phoenix(Deps)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/deps.png]]
#+END_CENTER

* Absinthe y Phoenix(router)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/router_absinthe.png]]
#+END_CENTER

* Absinthe y Phoenix(schema)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/schema_code.png]]
#+END_CENTER

* Thank You ʕ•ᴥ•ʔ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://graphql.org/learn/schema/#scalar-types][GraphQL Doc about Scalar Types]]
[fn:2] [[https://hexdocs.pm/absinthe/custom-scalars.html#content][Absinthe Doc for create custom scalar types]]
[fn:3] [[https://hexdocs.pm/absinthe/Absinthe.Type.Custom.html#content][Absinthe Custom Types]]
[fn:4] [[https://graphql.org/learn/schema/#enumeration-types][GraphQL Doc for Enumeration Types]]
[fn:5] [[https://graphql.org/learn/schema/#lists-and-non-null][GraphQL Doc for Lists and non-null types]]
[fn:6] [[https://graphql.org/learn/schema/#object-types-and-fields][GraphQL Doc for Object Type]]